#define MAX_MEMORY_SIZE 256
#define MAX_OPERATIONS_SIZE 256

int variable;
int criterion;
float threshold;
float difference;

RWBuffer<float> memoryBuffer;
Buffer<int> operationsBuffer;
int operationsSize;
int maxOperatorIndex;
int maxMemoryIndex;
int resultIndex;

// BYTECODE RESULT INTERPRETATION

#define GREATER_THAN 0
#define LESS_THAN 1
#define MIN_DIFFERENCE 2
bool Interpretate(float3 pos, float eval)
{
    int posCoord = clamp(variable, 0, 2);
    float useThreshold = variable > 2;
    float v = lerp(pos[posCoord], threshold, useThreshold);
    switch (criterion)
    {
        case GREATER_THAN:
            return eval >= v;
        case LESS_THAN:
            return eval <= v;
        case MIN_DIFFERENCE:
            return abs(eval - v) < difference;
        default:
            return 0.0f;
    }
}

// BYTECODE OPERATIONS

float ChangeSignIf(float val, bool condition)
{
    return val * (-2 * condition + 1);
}

#define FUNC_COS 0
#define FUNC_SIN 1
#define FUNC_ABS 2
float SolveSubFunction(int op, float v0, float v1, float v2)
{
    int subFunction = op - maxOperatorIndex;
    switch (subFunction)
    {
        case FUNC_COS:
            return cos(v0);
        case FUNC_SIN:
            return sin(v0);
        case FUNC_ABS:
            return abs(v0);
        default:
            return 0.0f;
    }
}

#define SUBTRACT 0
#define ADD 1
#define PRODUCT 2
#define DIVISION 3
#define POWER 4
float SolveOperator(int operation, float v0, float v1)
{
    switch (operation)
    {
        case SUBTRACT:
            return v0 - v1;
        case ADD:
            return v0 + v1;
        case PRODUCT:
            return v0 * v1;
        case DIVISION:
            return v0 / v1;
        case POWER:
            uint v1Int = v1;
            bool v1IsEven = v1Int % 2 == 0;
            bool v0IsPositive = v0 >= 0;
            float p = pow(abs(v0), v1Int);
            p = ChangeSignIf(p, !v0IsPositive && !v1IsEven);
            return p;
        default:
            return 0.0f;
    }
}

// BYTECODE INTERPRETATION

bool OperationIsSubfunction(int operation)
{
    return operation > maxOperatorIndex - 1;
}

float SolveByteCode(float3 pos)
{
    const static int clampedMaxMemoryIndex = clamp(maxMemoryIndex, 0, MAX_MEMORY_SIZE);
    const static int clampedOperationsSize = clamp(operationsSize, 0, MAX_OPERATIONS_SIZE);
	
    half memoryLocalCopy[MAX_MEMORY_SIZE];
    for (int u = 0; u < clampedMaxMemoryIndex; u++)
    {
        memoryLocalCopy[u] = memoryBuffer[u];
    }
		
    memoryLocalCopy[0] = 0;
    memoryLocalCopy[1] = pos.x;
    memoryLocalCopy[2] = pos.y;
    memoryLocalCopy[3] = pos.z;
    
    int i = 0;
    int memoryIndex = 0;
    while (i < clampedOperationsSize)
    {
        int operation = operationsBuffer[i];

        memoryIndex = operationsBuffer[i + 1];
        float v0 = memoryLocalCopy[abs(memoryIndex)];
        v0 = ChangeSignIf(v0, memoryIndex < 0);
        
        memoryIndex = operationsBuffer[i + 2];
        float v1 = memoryLocalCopy[abs(memoryIndex)];
        v1 = ChangeSignIf(v1, memoryIndex < 0);

        float operationResult;
        if (OperationIsSubfunction(operation))
        {
            memoryIndex = operationsBuffer[i + 3];
            float v2 = memoryLocalCopy[abs(memoryIndex)];
            v2 = ChangeSignIf(v2, memoryIndex < 0);
            operationResult = SolveSubFunction(operation, v0, v1, v2);
            i += 4;
        }
        else
        {
            operationResult = SolveOperator(operation, v0, v1);
            i += 3;
        }

        int opResultIndex = operationsBuffer[i];
        memoryLocalCopy[opResultIndex] = operationResult;
        i++;
    }

    float result = memoryLocalCopy[abs(resultIndex)];
    result = ChangeSignIf(result, resultIndex < 0);

    return Interpretate(pos, result);
}