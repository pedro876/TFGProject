// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Normals

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> DepthTex;
RWTexture2D<float4> ResultTex;
float maxRes;

[numthreads(8,8,1)]
void Normals (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float4 depthColor = DepthTex[id.xy];
    float center = depthColor.x;
    //float2 size = float2(2, 0);
    float3 off = float3(-30, 0, 30);
    float left = DepthTex[id.xy + off.xy].x;
    float right = DepthTex[id.xy + off.zy].x;
    float down = DepthTex[id.xy + off.yx].x;
    float up = DepthTex[id.xy + off.yz].x;

    float diffX = (right - center + center - left)/**0.5f+0.5f*/;
    float diffY = (up - center + center - down);

    float3 rightV = float3(diffX, 0, 0);
    float3 upV = float3(0, diffY, 0);

    float3 normal = normalize(cross(upV, rightV))*0.5f+0.5f;

    float4 finalColor = float4(normal,1);
    /*if (diffX == 0.0f) {
        finalColor = float4(1, 1, 1, 1);
    }
    else {
        finalColor = float4(diffX, 0, 0, 1);
    }*/

    /*float3 va = normalize(float3(size.xy, s21 - s01));
    float3 vb = normalize(float3(size.yx, s12 - s10));
    float4 bump = float4(cross(va, vb), 1.f);*/

    ResultTex[id.xy] = finalColor;//float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
